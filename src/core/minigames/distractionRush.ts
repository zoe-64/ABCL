import { incontinenceCheck } from "../player/player";
import { overlay } from "../player/ui";
import { BaseMiniGame } from "./baseMinigame";

const options = {
  Wetting: {
    good: [
      { text: "üñçÔ∏è Painting with Crayons" },
      { text: "üß± Building with Blocks" },
      { text: "üë∂ Shaking a Rattle" },
      { text: "üéµ Listening to Calming Music" },
      { text: "üí≠ Reciting the Alphabet Backwards" },
      { text: "üìö Reading a Boring Book" },
      { text: "üß© Doing a Simple Puzzle" },
      { text: "üé® Coloring in a Coloring Book" },
      { text: "üìù Writing Your Name Repeatedly" },
      { text: "ü™® Stacking Small Stones" },
      { text: "üßµ Threading Beads on a String" },
      { text: "üÉè Organizing Playing Cards" },
      { text: "üåÄ Drawing Spirals on Paper" },
      { text: "üñºÔ∏è Studying a Detailed Picture" },
      { text: "üîç Looking for Hidden Objects" },
      { text: "üóÇÔ∏è Sorting Paper Clips by Color" },
      { text: "üìã Making a Mental To-Do List" },
    ],
    bad: [
      { text: "ü•§ A Delicious Smoothie" },
      { text: "ü§∏ Jumping on a Trampoline" },
      { text: "üò¥ Taking a Nap" },
      { text: "üöø Listening to Running Water" },
      { text: "‚òï Drinking a Large Coffee" },
      { text: "üí¶ Sipping Iced Water" },
      { text: "üèÉ Doing Jumping Jacks" },
      { text: "üõÅ Sitting in a Warm Bath" },
      { text: "ü•õ Drinking a Glass of Milk" },
      { text: "ü§£ Watching a Comedy Show" },
      { text: "üåä Ocean Sounds Meditation" },
      { text: "üçâ Eating Watermelon" },
      { text: "üßò Doing Deep Squats" },
      { text: "ü´ñ Pouring Liquid Between Cups" },
      { text: "üö∞ Drinking Through a Straw" },
      { text: "üç∫ Holding a Cold Beer Can" },
      { text: "üé¢ Thinking of Rollercoasters" },
      { text: "‚ùÑÔ∏è Applying Cold Compress" },
      { text: "ü™ë Sitting on a Vibrating Chair" },
    ],
  },
  Messes: {
    good: [
      { text: "üßò Sitting Very Still and Straight" },
      { text: "üòÆ‚Äçüí® Taking Slow, Shallow Breaths" },
      { text: "üí≠ Counting Backwards from 100" },
      { text: "üìµ Ignoring Your Phone" },
      { text: "üëÉ Focusing on a Neutral Smell" },
      { text: "ü§ê Tightly Clenching Your Lips" },
      { text: "üõå Visualizing a Firm, Flat Surface" },
      { text: "üéµ Listening to Loud, Upbeat Music" },
      { text: "üìö Reading an Intense Thriller Novel" },
      { text: "‚úä Squeezing a Stress Ball (with your hand)" },
      { text: "üßÆ Mentally Calculating Math Problems" },
      { text: "üëÇ Tuning Into a Single Distant Sound" },
      { text: "üö´ Thinking 'No' on Repeat" },
      { text: "ü™ë Pressing Your Feet Firmly into the Floor" },
      { text: "üõë Visualizing a Big Red Stop Sign" },
      { text: "ü§û Crossing Your Fingers and Toes" },
      { text: "üí° Imagining a Bright, Dry Light" },
    ],
    bad: [
      { text: "‚òï Drinking a Hot Morning Coffee" },
      { text: "üö∞ Chugging a Glass of Water" },
      { text: "üç≥ Eating a Big Breakfast" },
      { text: "ü§£ Laughing Uncontrollably" },
      { text: "ü§ß Feeling a Sneeze Coming On" },
      { text: "ü™ë Sitting in a Warm, Comfy Armchair" },
      { text: "üßò Bending Over to Touch Your Toes" },
      { text: "üçé Eating a Fiber-Rich Cereal Bar" },
      { text: "ü´ñ Sipping on Prune Juice" },
      { text: "ü§∞ Wearing Tight Pants Around Your Waist" },
      { text: "üõå Lying Down on Your Side" },
      { text: "üçΩÔ∏è Smelling a Delicious Meal Cooking" },
      { text: "üèÉ‚Äç‚ôÇÔ∏è Jogging in Place" },
      { text: "üå∂Ô∏è Eating a Spicy Bite of Food" },
      { text: "üßä Drinking Iced Water Quickly" },
      { text: "üìñ Reading on the Toilet 'Just in Case'" },
      { text: "ü™ï Listening to Smooth, Relaxing Jazz" },
      { text: "ü§∞ Applying Gentle Stomach Pressure" },
    ],
  },
};

const WIN_THRESHOLD = 5;
const MAX_MISTAKES = 2;
function shuffleArray(array: any[]) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}
export class DistractionRushGame extends BaseMiniGame {
  correctAnswers = 0;
  mistakes = 0;
  rounds = 5;
  Element: HTMLElement | null = null;
  type: "Wetting" | "Messes";
  options: (typeof options)[typeof this.type];
  static timerLength: number = 120;
  timeLeft: number = 0;
  timer: NodeJS.Timeout | null = null;
  constructor(type: "Wetting" | "Messes") {
    super();
    this.type = type;
    this.name = "DistractionRush-" + type;
    this.options = options[type];
  }
  Load() {
    incontinenceCheck.pause();
    this.Element = ElementCreate({
      tag: "div",
      attributes: {
        id: "abcl-minigame",
      },
      classList: ["game-container", "minigame-loading"],
      children: [
        {
          tag: "h1",
          children: [`Oh no! The ${this.type === "Wetting" ? "stream" : "mess"} is coming soon!`],
        },
        {
          tag: "p",
          children: [document.createTextNode("Find a way to distract yourself before it's too late.")],
        },
        {
          tag: "div",
          attributes: { id: "abcl-minigame-status" },
          classList: ["status-bar"],
          children: [],
        },
        {
          tag: "div",
          attributes: { id: "abcl-minigame-container" },
          classList: ["abcl-minigame-vertical-list"],
          children: [],
        },
        ElementButton.Create(
          null,
          () => {
            this.End(false);
          },
          {
            tooltip: `Choose to ` + (this.type === "Wetting" ? "wet" : "mess") + " yourself.",
            tooltipPosition: "bottom",
          },
          {
            button: {
              classList: ["abcl-distraction-rush-button", "abcl-distraction-rush-button-forfeit"],
              children: ["Forfeit"],
            },
          },
        ),
        ElementCreate({
          tag: "div",
          attributes: {
            id: "abcl-minigame-timer",
          },
          children: ["00"],
        }),
      ],
      parent: overlay,
    });
    this.correctAnswers = 0;
    this.mistakes = 0;
    this.renderGame();
    this.timeLeft = DistractionRushGame.timerLength / MiniGameDifficulty;
    this.timer = setInterval(() => {
      this.timeLeft--;
      const timer = document.getElementById("abcl-minigame-timer");
      if (!timer || this.timeLeft < 0) return;
      timer.innerHTML = this.timeLeft < 10 ? "0" + this.timeLeft : this.timeLeft.toString();
      if (this.timeLeft <= 0 && this.correctAnswers < WIN_THRESHOLD) {
        this.ShowMessage(false);
      }
    }, 1000);
  }
  Unload() {
    ElementRemove(this.Element!);
    clearInterval(this.timer!);
  }
  renderGame() {
    if (this.correctAnswers >= WIN_THRESHOLD) {
      return this.ShowMessage(true);
    }
    if (this.mistakes >= MAX_MISTAKES) {
      return this.ShowMessage(false);
    }

    this.updateStatus();
    this.renderOptions();
  }

  updateStatus() {
    const statusContainer = document.getElementById("abcl-minigame-status");
    if (statusContainer) {
      statusContainer.innerHTML = `
                <span>‚úÖ Wins: ${this.correctAnswers} / ${WIN_THRESHOLD}</span>
                <span>‚ùå Mistakes: ${this.mistakes} / ${MAX_MISTAKES}</span>
            `;
    }
  }
  CreateOption(text: string, isGood: boolean) {
    const tooltipTexts = [
      "Hmm.. is that the right one?",
      "I'm not sure..",
      "Maybe you should press forfeit?",
      "It's too hard.",
      "Hmm yea this is probably correct.",
      "The pressure is too much!",
      "You probably can't read anymore... You are just looking at the icons",
    ];
    return ElementButton.Create(
      null,
      () => {
        if (isGood) {
          this.correctAnswers++;
        } else {
          this.mistakes++;
        }
        this.renderGame();
      },
      {
        tooltip: tooltipTexts[Math.floor(Math.random() * tooltipTexts.length)],
        tooltipPosition: "bottom",
      },
      {
        button: {
          classList: ["abcl-distraction-rush-button"],
          dataAttributes: {
            isGood: isGood,
          },
          children: [text],
        },
      },
    );
  }
  renderOptions() {
    const container = document.getElementById("abcl-minigame-container");
    if (!container) return;

    container.innerHTML = "";

    const goodIndex = Math.floor(Math.random() * this.options.good.length);
    const goodOption: { text: string; isGood: boolean } = { ...this.options.good[goodIndex], isGood: true };

    const badCandidates: { text: string; isGood: boolean }[] = [];
    for (let i = 0; i < Math.max(Math.round(2 * MiniGameDifficulty), 1); i++) {
      const candidate = { ...this.options.bad[Math.floor(Math.random() * this.options.bad.length)], isGood: false };
      badCandidates.push(candidate);
    }

    const selectedOptions: { text: string; isGood: boolean }[] = [goodOption, ...badCandidates];
    const shuffledOptions: { text: string; isGood: boolean }[] = shuffleArray(selectedOptions);

    // 4. Create buttons for each
    shuffledOptions.forEach(option => {
      const button = this.CreateOption(option.text, option.isGood);
      container.appendChild(button);
    });
  }
  ShowMessage(victory: boolean) {
    const container = document.getElementById("abcl-minigame-container")!;
    const statusContainer = document.getElementById("abcl-minigame-status")!;

    clearInterval(this.timer!);
    container.innerHTML = "";
    statusContainer.innerHTML = "";
    ElementCreate({
      tag: "div",
      classList: ["abcl-minigame-horizontal-list"],
      children: [
        {
          tag: "h2",
          children: [document.createTextNode("Result (closes in 15 seconds)")],
        },
        {
          tag: "p",
          children: [
            document.createTextNode(victory ? "SUCCESS! You held it! The distractions worked. What a relief!" : "FAILURE! The pressure was too great."),
          ],
        },
        ElementButton.Create(
          null,
          () => {
            this.End(victory);
          },
          null,
          {
            button: {
              classList: ["abcl-distraction-rush-button"],
              children: ["OK"],
            },
          },
        ),
      ],
      parent: statusContainer,
    });
    setTimeout(() => {
      if (!MiniGameEnded) this.End(victory);
    }, 15000);
  }

  End(victory: boolean) {
    super.End(victory);
  }
}
